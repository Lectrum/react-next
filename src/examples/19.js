// Core
import React, { memo, useState, useCallback, useMemo } from 'react';
import { render } from 'react-dom';

const Button = memo((props) => {
    console.log('‚Üí üñ• –†–µ–Ω–¥–µ—Ä –ø–æ—Ç–æ–º–∫–∞', props);

    return <button onClick = { props.handleClick }>{props.children}</button>;
});

const Counter = () => {
    const [ count, setCount ] = useState(0);

    /* –•—É–∫ useCallback(fn, inputs) —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω —Ö—É–∫—É useMemo(() => fn, inputs) */
    const _decrement = useCallback(() => setCount((prevCount) => prevCount - 1));
    const _reset = useCallback(() => setCount(0));
    const _increment = useMemo(() => () => setCount((prevCount) => prevCount + 1));

    console.log('‚Üí üñ• –†–µ–Ω–¥–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è');

    return (
        <section className = 'counter'>
            <h1>–°—á—ë—Ç—á–∏–∫: {count}</h1>
            <Button handleClick = { _decrement }>-</Button>
            <Button handleClick = { _reset }>–û–±–Ω—É–ª–∏—Ç—å</Button>
            <Button handleClick = { _increment }>+</Button>
        </section>
    );
};

render(<Counter />, document.getElementById('app'));
