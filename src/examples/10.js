/**
 * –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç useEffect ‚Äî –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤,
 * —Ç–æ –∫–æ–ª–ª–±–µ–∫ useEffect –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞,
 * –∞ —Ñ—É–Ω–∫—Ü–∏—è-–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ DOM.
 *
 * –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–≤—è–∑–∫—É componentDidMount + componentWillUnmount.
 */
import React, { useState, useEffect } from 'react';
import { render } from 'react-dom';

const Counter = () => {
    const [ count, setCount ] = useState(0);

    useEffect(() => {
        console.log('‚úÖ –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.');

        return () => console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.');
    }, []);

    console.log('üñ• –†–µ–Ω–¥–µ—Ä!', count);

    return (
        <section>
            <h1>–°—á—ë—Ç—á–∏–∫: {count}</h1>
            <button onClick = { () => setCount(count - 1) }>-</button>
            <button onClick = { () => setCount(0) }>–û–±–Ω—É–ª–∏—Ç—å</button>
            <button onClick = { () => setCount(count + 1) }>+</button>
        </section>
    );
};

const Parent = () => {
    const [ isMounted, setIsMounted ] = useState(true);

    return (
        <section className = 'counter'>
            <button onClick = { () => setIsMounted(!isMounted) }>
                {isMounted ? '–°–ø—Ä—è—Ç–∞—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
            </button>
            {isMounted && <Counter />}
        </section>
    );
};

render(<Parent />, document.getElementById('app'));
